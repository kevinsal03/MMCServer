From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevinsal03 <kevinsal03@users.noreply.github.com>
Date: Fri, 14 May 2021 12:10:08 -0400
Subject: [PATCH] Add basic crypto and Json mngr implementation


diff --git a/src/main/java/me/kevsal/minecraft/mmcserver/util/JsonManager.java b/src/main/java/me/kevsal/minecraft/mmcserver/util/JsonManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..506ffb9d25283b8b17b682c15b2c73b6ddd9e881
--- /dev/null
+++ b/src/main/java/me/kevsal/minecraft/mmcserver/util/JsonManager.java
@@ -0,0 +1,33 @@
+package me.kevsal.minecraft.mmcserver.util;
+
+import org.json.simple.JSONObject;
+import org.json.simple.parser.JSONParser;
+import org.json.simple.parser.ParseException;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class JsonManager {
+
+    private static final JSONParser parser = new JSONParser();
+
+    public static JSONObject jsonObjectFromString(String json) throws ParseException {
+        return (JSONObject) parser.parse(json);
+    }
+
+    public static JSONObject jsonObjectFromFile(String path) throws IOException, ParseException {
+        File f = new File(path);
+        return jsonObjectFromFile(f);
+    }
+
+    public static JSONObject jsonObjectFromFile(File f) throws IOException, ParseException {
+        FileReader fr = new FileReader(f);
+        return ((JSONObject) parser.parse(fr));
+    }
+
+    public static JSONParser parser() {
+        return parser;
+    }
+
+}
diff --git a/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSACryptography.java b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSACryptography.java
new file mode 100644
index 0000000000000000000000000000000000000000..74919f14154c382c31c6833fc6196e29243f76db
--- /dev/null
+++ b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSACryptography.java
@@ -0,0 +1,37 @@
+package me.kevsal.minecraft.mmcserver.util.crypto;
+
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.NoSuchPaddingException;
+import java.security.InvalidKeyException;
+import java.security.Key;
+import java.security.NoSuchAlgorithmException;
+import java.security.interfaces.RSAKey;
+
+public class RSACryptography {
+
+    private static Cipher cipher;
+
+    static {
+        try {
+            cipher = Cipher.getInstance("RSA");
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static byte[] encrypt(RSAKey key, byte[] data) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
+        cipher.init(Cipher.ENCRYPT_MODE, (Key) key);
+        return cipher.doFinal(data);
+    }
+
+    public static byte[] decrypt(RSAKey key, byte[] data) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
+        cipher.init(Cipher.DECRYPT_MODE, (Key) key);
+        return cipher.doFinal(data);
+    }
+
+    public static Cipher getCipher() {
+        return cipher;
+    }
+}
diff --git a/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyGenerator.java b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyGenerator.java
new file mode 100644
index 0000000000000000000000000000000000000000..a953c3273cb8135a63df0af79c634c427897b844
--- /dev/null
+++ b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyGenerator.java
@@ -0,0 +1,29 @@
+package me.kevsal.minecraft.mmcserver.util.crypto;
+
+import java.security.KeyPair;
+import java.security.KeyPairGenerator;
+import java.security.interfaces.RSAPrivateKey;
+import java.security.interfaces.RSAPublicKey;
+
+public class RSAKeyGenerator {
+
+    public static RSAKeyManager generateKeys(int length, String comment) {
+        try {
+            KeyPairGenerator keygen = KeyPairGenerator.getInstance("RSA");
+            keygen.initialize(length);
+
+            KeyPair pair = keygen.generateKeyPair();
+
+            return new RSAKeyManager(((RSAPublicKey) pair.getPublic()), ((RSAPrivateKey) pair.getPrivate()), comment);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.err.println("Unable to generate key");
+            return null;
+        }
+    }
+
+    public static RSAKeyManager generateKeys(int length) {
+        return generateKeys(length, null);
+    }
+}
diff --git a/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyManager.java b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..80187b8006efac3a79f38e8ac544683b428c9c9a
--- /dev/null
+++ b/src/main/java/me/kevsal/minecraft/mmcserver/util/crypto/RSAKeyManager.java
@@ -0,0 +1,110 @@
+package me.kevsal.minecraft.mmcserver.util.crypto;
+
+import me.kevsal.minecraft.mmcserver.util.JsonManager;
+import org.json.simple.JSONObject;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.security.KeyFactory;
+import java.security.interfaces.RSAKey;
+import java.security.interfaces.RSAPrivateKey;
+import java.security.interfaces.RSAPublicKey;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.PKCS8EncodedKeySpec;
+import java.security.spec.X509EncodedKeySpec;
+import java.util.Base64;
+
+public class RSAKeyManager {
+
+    private final String comment;
+    private final RSAPrivateKey privateKey;
+    private final RSAPublicKey publicKey;
+
+    public RSAKeyManager(File keyfile, String comment) {
+        try {
+            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
+
+            JSONObject kfo = JsonManager.jsonObjectFromFile(keyfile);
+
+            publicKey = genPubKey(((String) kfo.get("publicKey")), keyFactory);
+            privateKey = genPrivKey(((String) kfo.get("privateKey")), keyFactory);
+
+        } catch (Exception e) {
+            throw new RuntimeException("Error parsing keys");
+        }
+        this.comment = comment;
+    }
+
+    public RSAKeyManager(File keyFile) {
+        this(keyFile, null);
+    }
+
+    public RSAKeyManager(RSAPublicKey publicKey, RSAPrivateKey privateKey, String comment) {
+        this.publicKey = publicKey;
+        this.privateKey = privateKey;
+        this.comment = comment;
+    }
+
+    public RSAKeyManager(RSAPublicKey publicKey, RSAPrivateKey privateKey) {
+        this(publicKey, privateKey, null);
+    }
+
+    private RSAPublicKey genPubKey(String key, KeyFactory keyFactory) {
+        byte[] keyBytes = Base64.getDecoder().decode(key);
+        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
+        try {
+            return (RSAPublicKey) keyFactory.generatePublic(spec);
+        } catch (InvalidKeySpecException e) {
+            return null;
+        }
+    }
+    private RSAPrivateKey genPrivKey(String key, KeyFactory keyFactory) {
+        byte[] keyBytes = Base64.getDecoder().decode(key);
+        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
+        try {
+            return (RSAPrivateKey) keyFactory.generatePrivate(spec);
+        } catch (InvalidKeySpecException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public JSONObject exportKeys() {
+        JSONObject keyObject = new JSONObject();
+        String pubk64 = publicKey != null ? new String(Base64.getEncoder().encode(publicKey.getEncoded())) : "";
+        keyObject.put("publicKey", pubk64);
+        String prik64 = privateKey != null ? new String(Base64.getEncoder().encode(privateKey.getEncoded())) : "";
+        keyObject.put("privateKey", prik64);
+        return keyObject;
+    }
+
+    public boolean exportKeysToFile(File file) {
+        try {
+            if (file.canWrite()) {
+                FileWriter writer = new FileWriter(file);
+                writer.write(exportKeys().toJSONString());
+                writer.close();
+                return true;
+            } else {
+                return false;
+            }
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.err.println("Unable to keys to file");
+            return false;
+        }
+    }
+
+    public RSAPrivateKey getPrivateKey() {
+        return privateKey;
+    }
+
+    public RSAPublicKey getPublicKey() {
+        return publicKey;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+}
